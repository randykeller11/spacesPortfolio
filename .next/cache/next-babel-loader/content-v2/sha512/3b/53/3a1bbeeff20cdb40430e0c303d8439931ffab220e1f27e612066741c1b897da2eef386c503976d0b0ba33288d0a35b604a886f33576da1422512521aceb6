{"ast":null,"code":"import _defineProperty from \"/Users/dub_ceo/Desktop/spacesPortfolio/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _extends from \"/Users/dub_ceo/Desktop/spacesPortfolio/node_modules/next/node_modules/@babel/runtime/helpers/esm/extends\";\n\nvar _jsxFileName = \"/Users/dub_ceo/Desktop/spacesPortfolio/src/components/AvatarTyping/index.tsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\nimport React, { useRef, useEffect } from \"react\";\nimport { useGLTF, useAnimations } from \"@react-three/drei\";\nexport default function Model(_ref) {\n  _s();\n\n  var props = _extends({}, _ref);\n\n  var group = useRef();\n\n  var _ref2 = useGLTF(\"/avatarTyping.glb\"),\n      nodes = _ref2.nodes,\n      materials = _ref2.materials,\n      animations = _ref2.animations;\n\n  var _useAnimations = useAnimations(animations, group),\n      actions = _useAnimations.actions;\n\n  useEffect(function () {\n    console.log(actions);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"group\", _objectSpread(_objectSpread({\n    ref: group\n  }, props), {}, {\n    dispose: null,\n    children: [/*#__PURE__*/_jsxDEV(\"primitive\", {\n      object: nodes.Hips\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Body.geometry,\n      material: materials.Wolf3D_Body,\n      skeleton: nodes.Wolf3D_Body.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Outfit_Bottom.geometry,\n      material: materials.Wolf3D_Outfit_Bottom,\n      skeleton: nodes.Wolf3D_Outfit_Bottom.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Outfit_Footwear.geometry,\n      material: materials.Wolf3D_Outfit_Footwear,\n      skeleton: nodes.Wolf3D_Outfit_Footwear.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      geometry: nodes.Wolf3D_Outfit_Top.geometry,\n      material: materials.Wolf3D_Outfit_Top,\n      skeleton: nodes.Wolf3D_Outfit_Top.skeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      name: \"EyeLeft\",\n      geometry: nodes.EyeLeft.geometry,\n      material: nodes.EyeLeft.material,\n      skeleton: nodes.EyeLeft.skeleton,\n      morphTargetDictionary: nodes.EyeLeft.morphTargetDictionary,\n      morphTargetInfluences: nodes.EyeLeft.morphTargetInfluences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      name: \"EyeRight\",\n      geometry: nodes.EyeRight.geometry,\n      material: nodes.EyeRight.material,\n      skeleton: nodes.EyeRight.skeleton,\n      morphTargetDictionary: nodes.EyeRight.morphTargetDictionary,\n      morphTargetInfluences: nodes.EyeRight.morphTargetInfluences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      name: \"Wolf3D_Head\",\n      geometry: nodes.Wolf3D_Head.geometry,\n      material: materials.Wolf3D_Skin,\n      skeleton: nodes.Wolf3D_Head.skeleton,\n      morphTargetDictionary: nodes.Wolf3D_Head.morphTargetDictionary,\n      morphTargetInfluences: nodes.Wolf3D_Head.morphTargetInfluences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n      name: \"Wolf3D_Teeth\",\n      geometry: nodes.Wolf3D_Teeth.geometry,\n      material: materials.Wolf3D_Teeth,\n      skeleton: nodes.Wolf3D_Teeth.skeleton,\n      morphTargetDictionary: nodes.Wolf3D_Teeth.morphTargetDictionary,\n      morphTargetInfluences: nodes.Wolf3D_Teeth.morphTargetInfluences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Model, \"CcOwC/GrI/lgzhcrebx8FcbcXMw=\", false, function () {\n  return [useGLTF, useAnimations];\n});\n\n_c = Model;\nuseGLTF.preload(\"/avatarTyping.glb\");\n\nvar _c;\n\n$RefreshReg$(_c, \"Model\");","map":{"version":3,"sources":["/Users/dub_ceo/Desktop/spacesPortfolio/src/components/AvatarTyping/index.tsx"],"names":["React","useRef","useEffect","useGLTF","useAnimations","Model","props","group","nodes","materials","animations","actions","console","log","Hips","Wolf3D_Body","geometry","skeleton","Wolf3D_Outfit_Bottom","Wolf3D_Outfit_Footwear","Wolf3D_Outfit_Top","EyeLeft","material","morphTargetDictionary","morphTargetInfluences","EyeRight","Wolf3D_Head","Wolf3D_Skin","Wolf3D_Teeth","preload"],"mappings":";;;;;;;;;;;AAAA;AACA;AACA;AAGA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,SAASC,OAAT,EAAkBC,aAAlB,QAAuC,mBAAvC;AA6BA,eAAe,SAASC,KAAT,OAA6D;AAAA;;AAAA,MAAzCC,KAAyC;;AAC1E,MAAMC,KAAK,GAAGN,MAAM,EAApB;;AAD0E,cAEjCE,OAAO,CAC9C,mBAD8C,CAF0B;AAAA,MAElEK,KAFkE,SAElEA,KAFkE;AAAA,MAE3DC,SAF2D,SAE3DA,SAF2D;AAAA,MAEhDC,UAFgD,SAEhDA,UAFgD;;AAAA,uBAKtDN,aAAa,CAACM,UAAD,EAAaH,KAAb,CALyC;AAAA,MAKlEI,OALkE,kBAKlEA,OALkE;;AAO1ET,EAAAA,SAAS,CAAC,YAAM;AACdU,IAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE;AAAO,IAAA,GAAG,EAAEJ;AAAZ,KAAuBD,KAAvB;AAA8B,IAAA,OAAO,EAAE,IAAvC;AAAA,4BACE;AAAW,MAAA,MAAM,EAAEE,KAAK,CAACM;AAAzB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AACE,MAAA,QAAQ,EAAEN,KAAK,CAACO,WAAN,CAAkBC,QAD9B;AAEE,MAAA,QAAQ,EAAEP,SAAS,CAACM,WAFtB;AAGE,MAAA,QAAQ,EAAEP,KAAK,CAACO,WAAN,CAAkBE;AAH9B;AAAA;AAAA;AAAA;AAAA,YAFF,eAOE;AACE,MAAA,QAAQ,EAAET,KAAK,CAACU,oBAAN,CAA2BF,QADvC;AAEE,MAAA,QAAQ,EAAEP,SAAS,CAACS,oBAFtB;AAGE,MAAA,QAAQ,EAAEV,KAAK,CAACU,oBAAN,CAA2BD;AAHvC;AAAA;AAAA;AAAA;AAAA,YAPF,eAYE;AACE,MAAA,QAAQ,EAAET,KAAK,CAACW,sBAAN,CAA6BH,QADzC;AAEE,MAAA,QAAQ,EAAEP,SAAS,CAACU,sBAFtB;AAGE,MAAA,QAAQ,EAAEX,KAAK,CAACW,sBAAN,CAA6BF;AAHzC;AAAA;AAAA;AAAA;AAAA,YAZF,eAiBE;AACE,MAAA,QAAQ,EAAET,KAAK,CAACY,iBAAN,CAAwBJ,QADpC;AAEE,MAAA,QAAQ,EAAEP,SAAS,CAACW,iBAFtB;AAGE,MAAA,QAAQ,EAAEZ,KAAK,CAACY,iBAAN,CAAwBH;AAHpC;AAAA;AAAA;AAAA;AAAA,YAjBF,eAsBE;AACE,MAAA,IAAI,EAAC,SADP;AAEE,MAAA,QAAQ,EAAET,KAAK,CAACa,OAAN,CAAcL,QAF1B;AAGE,MAAA,QAAQ,EAAER,KAAK,CAACa,OAAN,CAAcC,QAH1B;AAIE,MAAA,QAAQ,EAAEd,KAAK,CAACa,OAAN,CAAcJ,QAJ1B;AAKE,MAAA,qBAAqB,EAAET,KAAK,CAACa,OAAN,CAAcE,qBALvC;AAME,MAAA,qBAAqB,EAAEf,KAAK,CAACa,OAAN,CAAcG;AANvC;AAAA;AAAA;AAAA;AAAA,YAtBF,eA8BE;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,QAAQ,EAAEhB,KAAK,CAACiB,QAAN,CAAeT,QAF3B;AAGE,MAAA,QAAQ,EAAER,KAAK,CAACiB,QAAN,CAAeH,QAH3B;AAIE,MAAA,QAAQ,EAAEd,KAAK,CAACiB,QAAN,CAAeR,QAJ3B;AAKE,MAAA,qBAAqB,EAAET,KAAK,CAACiB,QAAN,CAAeF,qBALxC;AAME,MAAA,qBAAqB,EAAEf,KAAK,CAACiB,QAAN,CAAeD;AANxC;AAAA;AAAA;AAAA;AAAA,YA9BF,eAsCE;AACE,MAAA,IAAI,EAAC,aADP;AAEE,MAAA,QAAQ,EAAEhB,KAAK,CAACkB,WAAN,CAAkBV,QAF9B;AAGE,MAAA,QAAQ,EAAEP,SAAS,CAACkB,WAHtB;AAIE,MAAA,QAAQ,EAAEnB,KAAK,CAACkB,WAAN,CAAkBT,QAJ9B;AAKE,MAAA,qBAAqB,EAAET,KAAK,CAACkB,WAAN,CAAkBH,qBAL3C;AAME,MAAA,qBAAqB,EAAEf,KAAK,CAACkB,WAAN,CAAkBF;AAN3C;AAAA;AAAA;AAAA;AAAA,YAtCF,eA8CE;AACE,MAAA,IAAI,EAAC,cADP;AAEE,MAAA,QAAQ,EAAEhB,KAAK,CAACoB,YAAN,CAAmBZ,QAF/B;AAGE,MAAA,QAAQ,EAAEP,SAAS,CAACmB,YAHtB;AAIE,MAAA,QAAQ,EAAEpB,KAAK,CAACoB,YAAN,CAAmBX,QAJ/B;AAKE,MAAA,qBAAqB,EAAET,KAAK,CAACoB,YAAN,CAAmBL,qBAL5C;AAME,MAAA,qBAAqB,EAAEf,KAAK,CAACoB,YAAN,CAAmBJ;AAN5C;AAAA;AAAA;AAAA;AAAA,YA9CF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAyDD;;GApEuBnB,K;UAEmBF,O,EAGrBC,a;;;KALEC,K;AAsExBF,OAAO,CAAC0B,OAAR,CAAgB,mBAAhB","sourcesContent":["/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport * as THREE from \"three\";\nimport React, { useRef, useEffect } from \"react\";\nimport { useGLTF, useAnimations } from \"@react-three/drei\";\nimport { GLTF } from \"three-stdlib\";\n\ntype GLTFResult = GLTF & {\n  nodes: {\n    Wolf3D_Body: THREE.SkinnedMesh;\n    Wolf3D_Outfit_Bottom: THREE.SkinnedMesh;\n    Wolf3D_Outfit_Footwear: THREE.SkinnedMesh;\n    Wolf3D_Outfit_Top: THREE.SkinnedMesh;\n    EyeLeft: THREE.SkinnedMesh;\n    EyeRight: THREE.SkinnedMesh;\n    Wolf3D_Head: THREE.SkinnedMesh;\n    Wolf3D_Teeth: THREE.SkinnedMesh;\n    Hips: THREE.Bone;\n  };\n  materials: {\n    Wolf3D_Body: THREE.MeshStandardMaterial;\n    Wolf3D_Outfit_Bottom: THREE.MeshStandardMaterial;\n    Wolf3D_Outfit_Footwear: THREE.MeshStandardMaterial;\n    Wolf3D_Outfit_Top: THREE.MeshStandardMaterial;\n    Wolf3D_Eye: THREE.MeshStandardMaterial;\n    Wolf3D_Skin: THREE.MeshStandardMaterial;\n    Wolf3D_Teeth: THREE.MeshStandardMaterial;\n  };\n};\n\ntype ActionName = \"Armature|mixamo.com|Layer0\";\ntype GLTFActions = Record<ActionName, THREE.AnimationAction>;\n\nexport default function Model({ ...props }: JSX.IntrinsicElements[\"group\"]) {\n  const group = useRef<THREE.Group>();\n  const { nodes, materials, animations } = useGLTF(\n    \"/avatarTyping.glb\"\n  ) as GLTFResult;\n  const { actions } = useAnimations(animations, group);\n\n  useEffect(() => {\n    console.log(actions);\n  }, []);\n\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <primitive object={nodes.Hips} />\n      <skinnedMesh\n        geometry={nodes.Wolf3D_Body.geometry}\n        material={materials.Wolf3D_Body}\n        skeleton={nodes.Wolf3D_Body.skeleton}\n      />\n      <skinnedMesh\n        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}\n        material={materials.Wolf3D_Outfit_Bottom}\n        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}\n      />\n      <skinnedMesh\n        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}\n        material={materials.Wolf3D_Outfit_Footwear}\n        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}\n      />\n      <skinnedMesh\n        geometry={nodes.Wolf3D_Outfit_Top.geometry}\n        material={materials.Wolf3D_Outfit_Top}\n        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}\n      />\n      <skinnedMesh\n        name=\"EyeLeft\"\n        geometry={nodes.EyeLeft.geometry}\n        material={nodes.EyeLeft.material}\n        skeleton={nodes.EyeLeft.skeleton}\n        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}\n        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}\n      />\n      <skinnedMesh\n        name=\"EyeRight\"\n        geometry={nodes.EyeRight.geometry}\n        material={nodes.EyeRight.material}\n        skeleton={nodes.EyeRight.skeleton}\n        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}\n        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}\n      />\n      <skinnedMesh\n        name=\"Wolf3D_Head\"\n        geometry={nodes.Wolf3D_Head.geometry}\n        material={materials.Wolf3D_Skin}\n        skeleton={nodes.Wolf3D_Head.skeleton}\n        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}\n        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}\n      />\n      <skinnedMesh\n        name=\"Wolf3D_Teeth\"\n        geometry={nodes.Wolf3D_Teeth.geometry}\n        material={materials.Wolf3D_Teeth}\n        skeleton={nodes.Wolf3D_Teeth.skeleton}\n        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}\n        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}\n      />\n    </group>\n  );\n}\n\nuseGLTF.preload(\"/avatarTyping.glb\");\n"]},"metadata":{},"sourceType":"module"}