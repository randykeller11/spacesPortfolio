{"ast":null,"code":"import create from \"zustand\";\nvar useSceneStore = create(function (set) {\n  return {\n    scene: 0,\n    setScene: function setScene(newScene) {\n      return set(function (state) {\n        return {\n          scene: newScene\n        };\n      });\n    }\n  };\n});\nexport default useSceneStore;","map":{"version":3,"sources":["/Users/dub_ceo/Desktop/spacesPortfolio/src/stores/sceneStore.tsx"],"names":["create","useSceneStore","set","scene","setScene","newScene","state"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,SAAnB;AAMA,IAAIC,aAAa,GAAGD,MAAM,CAAa,UAACE,GAAD;AAAA,SAAU;AAC/CC,IAAAA,KAAK,EAAE,CADwC;AAG/CC,IAAAA,QAAQ,EAAE,kBAACC,QAAD;AAAA,aACRH,GAAG,CAAC,UAACI,KAAD;AAAA,eAAY;AACdH,UAAAA,KAAK,EAAEE;AADO,SAAZ;AAAA,OAAD,CADK;AAAA;AAHqC,GAAV;AAAA,CAAb,CAA1B;AASA,eAAeJ,aAAf","sourcesContent":["import create from \"zustand\";\ninterface storeState {\n  scene: number;\n  setScene: (newScene: number) => void;\n}\n\nlet useSceneStore = create<storeState>((set) => ({\n  scene: 0,\n\n  setScene: (newScene: number) =>\n    set((state) => ({\n      scene: newScene,\n    })),\n}));\n\nexport default useSceneStore;\n"]},"metadata":{},"sourceType":"module"}